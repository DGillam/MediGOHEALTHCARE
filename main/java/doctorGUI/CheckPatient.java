/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doctorGUI;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.FieldValue;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.SetOptions;
import com.google.cloud.firestore.WriteResult;
import com.google.firebase.cloud.FirestoreClient;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import medigohealthcare.DatabaseCommunication;
import medigohealthcare.Security;
import relations.Doctor;
import relations.Patients;

/**
 *
 * @author 20175707
 */
public class CheckPatient extends javax.swing.JFrame {
    
    DefaultListModel listModelMedNew;
    DefaultListModel listModelMedCurrent;
    DefaultListModel listModelMedPast;
    ArrayList<String> medicineCurrent = new ArrayList<>();
    ArrayList<String> medicinePast = new ArrayList<>();
    String idPatient;
    String lastName;
    DoctorCheckPatient dcp;
    Doctor doctor;
    ImageIcon img;
    /**
     * Creates new form DoctorCheckPatient
     */
    public CheckPatient(DoctorCheckPatient dcp, Doctor doctor, Patients patient) {
        img = new ImageIcon(getClass().getResource("/MediGO round symbol.png"));
        this.dcp = dcp;
        this.doctor = doctor;
        listModelMedNew = new DefaultListModel();
        listModelMedPast = new DefaultListModel();
        listModelMedCurrent = new DefaultListModel();
        if (patient.medicineCurrent != null) {
            for (String medicine : patient.medicineCurrent) {
                listModelMedCurrent.addElement(medicine);
            }
        }
        if (patient.medicinePast != null) {
            for (String medicine : patient.medicinePast) {
                listModelMedPast.addElement(medicine);
            }
        }

        initComponents();
        
        this.idPatient = patient.email;
        this.lastName = patient.lastName;
        
        jLabel3.setText(patient.firstName);
        jLabel4.setText(patient.lastName);
        jLabel6.setText(patient.birthday);
        symbol.requestFocusInWindow();
        
        remCurr.setEnabled(false);
        modCurr.setEnabled(false);
        remNew.setEnabled(false);
        modNew.setEnabled(false);
        
        remCurr.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                remCurr.setEnabled(false);
            }
        });
        modCurr.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                modCurr.setEnabled(false);
            }
        });
        medicineListCurrent.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                remCurr.setEnabled(true);
                modCurr.setEnabled(true);
            }
        });
        
        remNew.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                remNew.setEnabled(false);
            }
        });
        modNew.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                modNew.setEnabled(false);
            }
        });
        medicineListNew.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                remNew.setEnabled(true);
                modNew.setEnabled(true);
            }
        });
        
        

    }

    private CheckPatient() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        symbol = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicineListCurrent = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        remCurr = new javax.swing.JButton();
        modCurr = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicineListNew = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        addNew = new javax.swing.JButton();
        modNew = new javax.swing.JButton();
        remNew = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        medicineListPast = new javax.swing.JList<>();
        cancel1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        save1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(img.getImage());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("First Name");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Last Name");

        jPanel2.setBackground(new java.awt.Color(42, 81, 197));

        symbol.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logoBar.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(symbol)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(symbol, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Date of Birth");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("jLabel3");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("jLabel3");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("jLabel3");

        medicineListCurrent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        medicineListCurrent.setModel(listModelMedCurrent);
        medicineListCurrent.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(medicineListCurrent);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Current medications:");

        remCurr.setBackground(new java.awt.Color(42, 81, 197));
        remCurr.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        remCurr.setForeground(new java.awt.Color(255, 255, 255));
        remCurr.setText("Remove Selected");
        remCurr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remCurrActionPerformed(evt);
            }
        });

        modCurr.setBackground(new java.awt.Color(42, 81, 197));
        modCurr.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        modCurr.setForeground(new java.awt.Color(255, 255, 255));
        modCurr.setText("Modify Indication");
        modCurr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modCurrActionPerformed(evt);
            }
        });

        medicineListNew.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        medicineListNew.setModel(listModelMedNew);
        medicineListNew.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(medicineListNew);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Add new medicines:");

        addNew.setBackground(new java.awt.Color(42, 81, 197));
        addNew.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addNew.setForeground(new java.awt.Color(255, 255, 255));
        addNew.setText("Add another medicine");
        addNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewActionPerformed(evt);
            }
        });

        modNew.setBackground(new java.awt.Color(42, 81, 197));
        modNew.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        modNew.setForeground(new java.awt.Color(255, 255, 255));
        modNew.setText("Modify Indication");
        modNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modNewActionPerformed(evt);
            }
        });

        remNew.setBackground(new java.awt.Color(42, 81, 197));
        remNew.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        remNew.setForeground(new java.awt.Color(255, 255, 255));
        remNew.setText("Remove Selected");
        remNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remNewActionPerformed(evt);
            }
        });

        medicineListPast.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        medicineListPast.setModel(listModelMedPast);
        jScrollPane3.setViewportView(medicineListPast);

        cancel1.setBackground(new java.awt.Color(42, 81, 197));
        cancel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancel1.setForeground(new java.awt.Color(255, 255, 255));
        cancel1.setText("Cancel");
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Medications history:");

        save1.setBackground(new java.awt.Color(42, 81, 197));
        save1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        save1.setForeground(new java.awt.Color(255, 255, 255));
        save1.setText("Save");
        save1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(remCurr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modCurr))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(remNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addNew))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(cancel1)
                        .addGap(27, 27, 27)
                        .addComponent(save1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(remNew)
                            .addComponent(addNew)
                            .addComponent(modNew))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(remCurr)
                            .addComponent(modCurr)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(save1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void remCurrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remCurrActionPerformed
        // TODO add your handling code here:  
        int size = listModelMedCurrent.getSize();

        if (size == 0 || medicineListCurrent.getSelectedValue() == null) {
            remCurr.setEnabled(false);
        } else {
            int index = medicineListCurrent.getSelectedIndex();
            new RemoveMed(listModelMedCurrent, listModelMedPast, index, medicineListCurrent.getSelectedValue()).setVisible(true);
        }
    }//GEN-LAST:event_remCurrActionPerformed

    private void modCurrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modCurrActionPerformed
        // TODO add your handling code here:
        int size = listModelMedCurrent.getSize();

        if (size == 0 || medicineListCurrent.getSelectedValue() == null) {
            modCurr.setEnabled(false);
        } else {
            String selectedMed = medicineListCurrent.getSelectedValue();
            int selectedIndex = medicineListCurrent.getSelectedIndex();
            new Indication(listModelMedCurrent, selectedMed, selectedIndex).setVisible(true);
        }
    }//GEN-LAST:event_modCurrActionPerformed

    private void addNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            new MedicinesForm(listModelMedNew).setVisible(true);
        } catch (InterruptedException ex) {
            Logger.getLogger(DoctorAddPatient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ExecutionException ex) {
            Logger.getLogger(DoctorAddPatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addNewActionPerformed

    private void modNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modNewActionPerformed
        // TODO add your handling code here:
        int size = listModelMedNew.getSize();

        if (size == 0 || medicineListNew.getSelectedValue() == null) {
            modNew.setEnabled(false);
        } else {
            String selectedMed = medicineListNew.getSelectedValue();
            int selectedIndex = medicineListNew.getSelectedIndex();
            new Indication(listModelMedNew, selectedMed, selectedIndex).setVisible(true);
        }
    }//GEN-LAST:event_modNewActionPerformed

    private void remNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remNewActionPerformed
        // TODO add your handling code here:
        if (!(medicineListNew.getSelectedValue() == null)){
            int index = medicineListNew.getSelectedIndex();
            listModelMedNew.remove(index);
        }

        int size = listModelMedNew.getSize();

        if (size == 0 || medicineListNew.getSelectedValue() == null) { //Nobody's left, disable firing.
            remNew.setEnabled(false);

        } else { //Remove selected.
            int[] selectedIndices = medicineListNew.getSelectedIndices();
            for (int i = selectedIndices.length-1; i >=0; i--) {
                listModelMedNew.removeElementAt(selectedIndices[i]);
            }
        }
    }//GEN-LAST:event_remNewActionPerformed

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancel1ActionPerformed

    private void save1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save1ActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < medicineListNew.getModel().getSize(); i++) {
                String item = medicineListNew.getModel().getElementAt(i);
                medicineCurrent.add(item);
            }
        for (int i = 0; i < medicineListCurrent.getModel().getSize(); i++) {
                String item = medicineListCurrent.getModel().getElementAt(i);
                medicineCurrent.add(item);
            }
        for (int i = 0; i < medicineListPast.getModel().getSize(); i++) {
                String item = medicineListPast.getModel().getElementAt(i);
                medicinePast.add(item);
            }
        
        // Sign prescription
        String prescription = getPrescription();
        String signature = null;
        try {
            signature = Security.signPrescription(prescription);
        } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | SignatureException ex) {
            Logger.getLogger(CheckPatient.class.getName()).log(Level.SEVERE, null, ex);
        }
        DatabaseCommunication.updatePatientMedicines(idPatient, medicineCurrent, medicinePast, doctor.email, signature);
        
        this.dispose();
        dcp.dispose();
        JOptionPane.showMessageDialog(null, "Patient " + lastName + " medication has been updated.", "Successfull operation", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_save1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckPatient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNew;
    private javax.swing.JButton cancel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> medicineListCurrent;
    private javax.swing.JList<String> medicineListNew;
    private javax.swing.JList<String> medicineListPast;
    private javax.swing.JButton modCurr;
    private javax.swing.JButton modNew;
    private javax.swing.JButton remCurr;
    private javax.swing.JButton remNew;
    private javax.swing.JButton save1;
    private javax.swing.JLabel symbol;
    // End of variables declaration//GEN-END:variables

    private String getPrescription() {
        String prescription = null;
        for (String med : medicineCurrent){
            if (prescription == null) {
                if (!med.contains(" -- Started on: ")) {
                        prescription = med;
                   } else {
                        String[] pre = med.split(" -- Started on: ");
                       prescription = pre[0];
                   }
            } else {
                if (!med.contains(" -- Started on: ")) {
                        prescription = prescription + med;
                   } else {
                        String[] pre = med.split(" -- Started on: ");
                       prescription = prescription + pre[0];
                   }
            }
        }
        return prescription;
    }
}

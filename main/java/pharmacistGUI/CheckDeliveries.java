/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pharmacistGUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import medigohealthcare.DatabaseCommunication;
import relations.Deliveries;
import relations.Pharmacist;

/**
 *
 * @author 20175707
 */
public class CheckDeliveries extends javax.swing.JFrame {
    
    DefaultListModel listModelCurrent;
    DefaultListModel listModelPast;
    Pharmacist pharmacist;
    ArrayList<Deliveries> deliveriesCurrent;
    ArrayList<Deliveries> deliveriesPast;
    ImageIcon img;
    /**
     * Creates new form CheckDeliveries
     */
    public CheckDeliveries(Pharmacist pharmacist) throws InterruptedException, ExecutionException {
        img = new ImageIcon(getClass().getResource("/MediGO round symbol.png"));
        listModelCurrent = new DefaultListModel();
        listModelPast = new DefaultListModel();
        this.pharmacist = pharmacist;
        initComponents();
        
        cBox.requestFocusInWindow();
        
        // Display current deliveries
        deliveriesCurrent = DatabaseCommunication.getCurrentDeliveries(pharmacist);
        for (Deliveries delivery : deliveriesCurrent){
            String entry = delivery.id + " = " +delivery.robotID + " -- " + delivery.deliveryDate + " -- " + delivery.emailPharmacist; 
            listModelCurrent.addElement(entry);
        }
        
        // Display past deliveries
        deliveriesPast = DatabaseCommunication.getPastDeliveries(pharmacist);
        if (cBox.getSelectedItem().toString().equals("you")) {
            for (Deliveries delivery : deliveriesPast){
                if (delivery.emailPharmacist.equals(pharmacist.email)) {
                    String entry = delivery.id + " = " +delivery.robotID + " -- " + delivery.deliveryDate; 
                    listModelPast.addElement(entry);
                }
            }
        } else {
            for (Deliveries delivery : deliveriesPast){
                String entry = delivery.id + " = " + delivery.robotID + " -- " + delivery.deliveryDate + delivery.emailPharmacist; 
                listModelPast.addElement(entry);
            }
        }
        
        // Add button listener
        
        confirm.setEnabled(false);
        show.setEnabled(false);
        
        confirm.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                confirm.setEnabled(false);
            }
        });
        show.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                show.setEnabled(false);
            }
        });
        
        current.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                confirm.setEnabled(true);
                show.setEnabled(true);
            }
        });
        
        
        // Add listener to combobox
        cBox.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                try {
                    retrieveNewPastDeliveries();
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(CheckDeliveries.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private CheckDeliveries() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        symbol = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        current = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        confirm = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        past = new javax.swing.JList<>();
        cancel1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        show = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(img.getImage());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(42, 81, 197));

        symbol.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logoBar.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(symbol)
                .addContainerGap(647, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(symbol, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        current.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        current.setModel(listModelCurrent);
        current.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(current);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Current deliveries for the pharmacy:");

        confirm.setBackground(new java.awt.Color(42, 81, 197));
        confirm.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        confirm.setForeground(new java.awt.Color(255, 255, 255));
        confirm.setText("Confim robot returned");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        past.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        past.setModel(listModelPast);
        jScrollPane3.setViewportView(past);

        cancel1.setBackground(new java.awt.Color(42, 81, 197));
        cancel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancel1.setForeground(new java.awt.Color(255, 255, 255));
        cancel1.setText("Go Back");
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Deliveries history:");

        cBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "you", "the pharmacy" }));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Check deliveries performed by");

        show.setBackground(new java.awt.Color(42, 81, 197));
        show.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        show.setForeground(new java.awt.Color(255, 255, 255));
        show.setText("Show delivery details");
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cancel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(show, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(confirm)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(confirm)
                            .addComponent(show)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(cancel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        int size = listModelCurrent.getSize();

        if (size == 0 || current.getSelectedValue() == null) {
            confirm.setEnabled(false);
        } else {
            String delivery = current.getSelectedValue();
            String[] dData = delivery.split(" =");
            String id = dData[0];
            listModelCurrent.removeElement(delivery);
            try {
                DatabaseCommunication.updateDeliveryState(id);
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(CheckDeliveries.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                retrieveNewPastDeliveries();
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(CheckDeliveries.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_confirmActionPerformed

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancel1ActionPerformed

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
        int size = listModelCurrent.getSize();

        if (size == 0 || current.getSelectedValue() == null) {
            confirm.setEnabled(false);
        } else {
            String delivery = current.getSelectedValue();
            String[] dData = delivery.split(" =");
            String id = dData[0];
            try {
                new DeliveryData(id).setVisible(true);
             } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(CheckDeliveries.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_showActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckDeliveries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckDeliveries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckDeliveries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckDeliveries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckDeliveries().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cBox;
    private javax.swing.JButton cancel1;
    private javax.swing.JButton confirm;
    private javax.swing.JList<String> current;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> past;
    private javax.swing.JButton show;
    private javax.swing.JLabel symbol;
    // End of variables declaration//GEN-END:variables
    public void retrieveNewPastDeliveries() throws InterruptedException, ExecutionException{
        // Display past deliveries
        listModelPast.clear();
        deliveriesPast = DatabaseCommunication.getPastDeliveries(pharmacist);
        if (cBox.getSelectedItem().toString().equals("you")) {
            for (Deliveries delivery : deliveriesPast){
                if (delivery.emailPharmacist.equals(pharmacist.email)) {
                    String entry = delivery.id + " = " +delivery.robotID + " -- " + delivery.deliveryDate; 
                    listModelPast.addElement(entry);
                }
            }
        } else {
            for (Deliveries delivery : deliveriesPast){
                String entry = delivery.id + " = " + delivery.robotID + " -- " + delivery.deliveryDate + delivery.emailPharmacist; 
                listModelPast.addElement(entry);
            }
        }
    }
}
